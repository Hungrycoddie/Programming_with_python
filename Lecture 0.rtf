{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset204 PTSans-Bold;\f1\fnil\fcharset204 PTSans-Regular;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;\red25\green28\blue31;\red255\green255\blue255;\red246\green247\blue249;
\red180\green58\blue4;\red52\green52\blue52;\red19\green142\blue2;\red0\green0\blue255;\red251\green0\blue7;
}
{\*\expandedcolortbl;;\cssrgb\c12941\c14510\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c97255\c97647\c98039;
\cssrgb\c76471\c30588\c0;\cssrgb\c26667\c26667\c26667;\cssrgb\c0\c61176\c0;\cssrgb\c0\c0\c100000;\cssrgb\c100000\c0\c0;
}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}
{\list\listtemplateid12\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid12}
{\list\listtemplateid13\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid13}
{\list\listtemplateid14\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid14}
{\list\listtemplateid15\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid15}
{\list\listtemplateid16\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid16}
{\list\listtemplateid17\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid17}
{\list\listtemplateid18\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid18}
{\list\listtemplateid19\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid19}
{\list\listtemplateid20\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid20}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}{\listoverride\listid12\listoverridecount0\ls12}{\listoverride\listid13\listoverridecount0\ls13}{\listoverride\listid14\listoverridecount0\ls14}{\listoverride\listid15\listoverridecount0\ls15}{\listoverride\listid16\listoverridecount0\ls16}{\listoverride\listid17\listoverridecount0\ls17}{\listoverride\listid18\listoverridecount0\ls18}{\listoverride\listid19\listoverridecount0\ls19}{\listoverride\listid20\listoverridecount0\ls20}}
\margl1440\margr1440\vieww28300\viewh17700\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#lecture-0"}}{\fldrslt 
\f0\b\fs46\fsmilli23100 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Lecture 0}}
\f0\b\fs46\fsmilli23100 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#creating-code-with-python"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Creating Code with Python}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#functions"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Functions}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#bugs"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Bugs}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#improving-your-first-python-program"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Improving Your First Python Program}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#variables"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Variables}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#comments"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Comments}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl1\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#pseudocode"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Pseudocode}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#further-improving-your-first-python-program"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Further Improving Your First Python Program}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#strings-and-paremeters"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Strings and Paremeters}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#a-small-problem-with-quotation-marks"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 A small problem with quotation marks}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#formatting-strings"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Formatting Strings}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#more-on-strings"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 More on Strings}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#integers-or-int"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Integers or int}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#readability-wins"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Readability Wins}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#float-basics"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Float Basics}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#more-on-floats"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 More on Floats}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#def"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Def}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#returning-values"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Returning Values}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#summing-up"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Summing Up}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#creating-code-with-python"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Creating Code with Python}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls2\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 VS Code is a special type of text editor that is called a compiler. At the top, you\'92ll notice a text editor and, at the bottom you will see a terminal where you can execute commands.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the terminal, you can execute\'a0
\fs28 \cb4 code hello.py
\fs32 \cb3 \'a0to start coding.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the text editor above, you can type\'a0
\fs28 \cb4 print("hello, world")
\fs32 \cb3 . This is a famous canonical program that nearly all coders write during their learning process.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the terminal window, you can execute commands. To run this program, you are going to need to move your cursor to the bottom of the screen, clicking in the terminal window. You can now type a second command in the terminal window. Next to the dollar sign, type\'a0
\fs28 \cb4 python hello.py
\fs32 \cb3 \'a0and press the enter key on your keyboard.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Recall, computers really only understand zeros and ones. Therefore, when you run\'a0
\fs28 \cb4 python hello.py
\fs32 \cb3 , python will interpret the text that you created in\'a0
\fs28 \cb4 hello.py
\fs32 \cb3 \'a0and translate it into the zeros and ones that the computer can understand.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 The result of running the\'a0
\fs28 \cb4 python hello.py
\fs32 \cb3 \'a0program is\'a0
\fs28 \cb4 hello, world
\fs32 \cb3 .\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Congrats! You just created your first program.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#functions"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Functions}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls3\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Functions are verbs or actions that the computer or computer language will already know how to perform.\cb1 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In your\'a0
\fs28 \cb4 hello.py
\fs32 \cb3 \'a0program, the\'a0
\fs28 \cb4 print
\fs32 \cb3 \'a0function knows how to print to the terminal window.\cb1 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 The\'a0
\fs28 \cb4 print
\fs32 \cb3 \'a0function takes arguments. In this case,\'a0
\fs28 \cb4 "hello, world"
\fs32 \cb3 \'a0are the arguments that the\'a0
\fs28 \cb4 print
\fs32 \cb3 \'a0function takes.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#bugs"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Bugs}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls4\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Bugs are a natural part of coding. These are mistakes, problems for you to solve! Don\'92t get discouraged! This is part of the process of becoming a great programmer.\cb1 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Imagine in our\'a0
\fs28 \cb4 hello.py
\fs32 \cb3 \'a0program that accidentally typed\'a0
\fs28 \cb4 print("hello, world"
\fs32 \cb3 \'a0notice that we missed the final\'a0
\fs28 \cb4 )
\fs32 \cb3 \'a0required by the compiler. If I purposefully make this mistake, you\'92ll the compiler will output an error in the terminal window!\cb1 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Often, the error messages will inform you of your mistake and provide you clues on how to fix them. However, there will be many times that the compiler is not this kind.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#improving-your-first-python-program"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Improving Your First Python Program}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls5\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can personalize your first Python program.\cb1 \
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In our text editor in\'a0
\fs28 \cb4 hello.py
\fs32 \cb3 \'a0we can add another function.\'a0
\fs28 \cb4 input
\fs32 \cb3 \'a0is a function that takes a prompt as an argument. We can edit our code to say\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello, world"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 This edit alone, however, will not allow your program to output what your user inputs. For that, we will need to introduce you to variables\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#variables"}}{\fldrslt 
\f0\b\fs30 \cf2 Variables}}
\f0\b\fs30 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 A variable is just a container for a value within your own program.\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In your program, you can introduce your own variable in your program by editing it to read\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello, world"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that this equal\'a0
\fs28 \cb4 =
\fs32 \cb3 \'a0sign in the middle of\'a0
\fs28 \cb4 name = input("What's your name? ")
\fs32 \cb3 \'a0has a special role in programming. This equal sign literally assigns what is on the right to what is on the left. Therefore, the value returned by\'a0
\fs28 \cb4 input("What's your name? ")
\fs32 \cb3 \'a0is assigned to\'a0
\fs28 \cb4 name
\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 If you edit your code as follows, you will notice an error\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello, name"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 The program will return\'a0
\fs28 \cb4 hello, name
\fs32 \cb3 \'a0in the terminal window regardless of what the user types.\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Further editing our code, you could type\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 )\
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 The result in the terminal window would be\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 What\cf7 \strokec7 's your name? David\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf7 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 hello\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7 David\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We are getting closer to the result we might intend!\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can learn more in Python\'92s documentation on\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/datatypes.html"}}{\fldrslt \ul data types}}.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#comments"}}{\fldrslt 
\f0\b\fs30 \cf2 Comments}}
\f0\b\fs30 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls7\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Comments are a way for programmers to track what they are doing in their programs and even inform others about their intentions for a block of code. In short, they are notes for yourself and others that will see your code!\cb1 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can add comments to your program to be able to see what it is that your program is doing. You might edit your code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 )\
\ls7\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls7\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Comments can also serve as to-do list for you.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#pseudocode"}}{\fldrslt 
\f0\b\fs30 \cf2 Pseudocode}}
\f0\b\fs30 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls8\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Pseudocode is an important type of comment that becomes a special type of to-do list, especially when you don\'92t understand how to accomplish a coding task. For example, in your code, you might edit your code to say:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print hello\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the name inputted\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#further-improving-your-first-python-program"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Further Improving Your First Python Program}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls9\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can further edit our code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print hello and the inputted name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello, "\cf6 \strokec6  + name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 It turns out that some functions take many arguments.\cb1 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can use a comma\'a0
\fs28 \cb4 ,
\fs32 \cb3 \'a0to pass in multiple arguments by editing our code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print hello and the inputted name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 , name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 The output in the terminal, if we typed \'93David\'94 we would be\'a0
\fs28 \cb4 hello, David
\fs32 \cb3 . Success.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#strings-and-paremeters"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Strings and Paremeters}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 A string, known as a\'a0
\fs28 \cb4 str
\fs32 \cb3 \'a0in Python, is a sequence of text.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Rewinding a bit in our code back to the following, there was a visual side effect of having the result appear on multiple lines:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 )\
\ls10\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Functions take arguments that influence their behavior. If we look at the documentation for\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#print"}}{\fldrslt 
\fs28 \cb4 \ul print}}\'a0you\'92ll notice we can learn a lot about the arguments that the print function takes.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Looking at this documentation, you\'92ll learn that the print function automatically include a piece of code\'a0
\fs28 \cb4 end='\\n'. This\'a0
\fs32 \cb3 \\n
\fs28 \cb4 \'a0indicates that the print function will automatically create a line break when run. The print function takes an argument called\'a0
\fs32 \cb3 end` and the default is to create a new line.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 However, we can technically provide an argument for\'a0
\fs28 \cb4 end
\fs32 \cb3 \'a0ourselves such that a new line is not created!\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can modify our code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 , end=\cf7 \strokec7 ""\cf6 \strokec6 )\
\ls10\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 By providing\'a0
\fs28 \cb4 end=""
\fs32 \cb3 \'a0we are over-writing the default value of\'a0
\fs28 \cb4 end
\fs32 \cb3 \'a0such that it never creates a new line after this first print statement. Providing the name as \'93David\'94, the output in the terminal window will be\'a0
\fs28 \cb4 hello, David
\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Parameters, therefore, are arguments that can be taken by a function.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can learn more in Python\'92s documentation on\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html#print"}}{\fldrslt 
\fs28 \cb4 \ul print}}.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#a-small-problem-with-quotation-marks"}}{\fldrslt 
\f0\b\fs30 \cf2 A small problem with quotation marks}}
\f0\b\fs30 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls11\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Notice how adding quotation marks as part of your string is challenging.\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 print("hello,"friend"")
\fs32 \cb3 \'a0will not work and the compiler will throw an error.\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Generally, there are two approaches to fixing this. First, you could simply change the quotes to single quote marks.\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Another, more commonly used approach would be code as\'a0
\fs28 \cb4 print("hello, \\"friend\\"")
\fs32 \cb3 . The backslashes tell the compiler that the following character should be considered a quotation mark in the string and avoid a compiler error.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#formatting-strings"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Formatting Strings}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls12\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Probably the most elegant way to use strings would be as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "hello, \{\cf6 \strokec6 name\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls12\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice the\'a0
\fs28 \cb4 f
\fs32 \cb3 \'a0in\'a0
\fs28 \cb4 print(f"hello, \{name\}")
\fs32 \cb3 . This\'a0
\fs28 \cb4 f
\fs32 \cb3 \'a0is a special indicator to Python to treat this string a special way, different than previous approaches we have illustrated in this lecture. Expect that you will be using this style of strings quite frequently in this course.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#more-on-strings"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 More on Strings}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls13\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You should never expect your user will cooperate as intended. Therefore, you will need to ensure that the input of your user is corrected or checked.\cb1 \
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 It turns out that built into strings is the ability to remove whitespace from a string.\cb1 \
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 By utilizing the method\'a0
\fs28 \cb4 strip
\fs32 \cb3 \'a0on\'a0
\fs28 \cb4 name
\fs32 \cb3 \'a0as\'a0
\fs28 \cb4 name = name.strip()
\fs32 \cb3 , it will strip all the whitespaces on the left and right of the users input. You can modify your code to be:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Remove whitespace from the str\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = name.strip()\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the output\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "hello, \{\cf6 \strokec6 name\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Rerunning this program, regardless of how many spaces you type before or after the name, it will strip off all the whitespace.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls13\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Using the\'a0
\fs28 \cb4 title
\fs32 \cb3 \'a0method, it would title case the user\'92s name:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Remove whitespace from the str\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = name.strip()\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Capitalize the first letter of each word\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = name.title()\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the output\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "hello, \{\cf6 \strokec6 name\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls13\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 By this point, you might be very tired of typing\'a0
\fs28 \cb4 python
\fs32 \cb3 \'a0repeatedly in the terminal window. You cause us the up arrow of your keyboard to recall the most recent terminal commands you have made.\cb1 \
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Notice that you can modify your code to be more efficient:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Remove whitespace from the str and capitalize the first letter of each word\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = name.strip().title()\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the output\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "hello, \{\cf6 \strokec6 name\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 This creates the same result as your previous code.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls13\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We could even go further!\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 ).strip().title()\
\ls13\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the output\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "hello, \{\cf6 \strokec6 name\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls13\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls13\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can learn more about strings in Python\'92s documentation on\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/stdtypes.html#str"}}{\fldrslt 
\fs28 \cb4 \ul str}}\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#integers-or-int"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Integers or int}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls14\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In Python, an integer is referred to as an\'a0
\fs28 \cb4 int
\fs32 \cb3 .\cb1 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the world of mathematics, we are familiar with +, -, *, /, and % operators. That last operator\'a0
\fs28 \cb4 %
\fs32 \cb3 \'a0or modulo operator may not be very familiar to you.\cb1 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You don\'92t have to use the text editor window in your compiler to run Python code. Down in your terminal, you can run\'a0
\fs28 \cb4 python
\fs32 \cb3 \'a0alone. You will be presented with\'a0
\fs28 \cb4 >>>
\fs32 \cb3 \'a0in the terminal window. You can then run live, interactive code. You could type\'a0
\fs28 \cb4 1+1
\fs32 \cb3 \'a0and it will run that calculation. This mode will not commonly be used during this course.\cb1 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Opening up VS Code again, we can type\'a0
\fs28 \cb4 code calculator.py
\fs32 \cb3 \'a0in the terminal. This will create a new file in which we will create our own calculator.\cb1 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 First, we can declare a few variables.\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 x = 1\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = 2\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = x + y\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (z)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Naturally, when we run\'a0
\fs28 \cb4 python calculator.py
\fs32 \cb3 \'a0we get the result in the terminal window of\'a0
\fs28 \cb4 3
\fs32 \cb3 . We can make this more interactive using the\'a0
\fs28 \cb4 input
\fs32 \cb3 \'a0function.\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 x = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 )\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 )\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = x + y\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (z)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls14\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Running this program, we discover that the output is incorrect as\'a0
\fs28 \cb4 12
\fs32 \cb3 . Why might this be?\cb1 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Prior, we have seen how the\'a0
\fs28 \cb4 +
\fs32 \cb3 \'a0sign concatenates two strings. Because your input from your keyboard on your computer comes into the compiler as text, it is treated a string. We, therefore, need to convert this input from a string to an integer. We can do so as follows:\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 x = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 )\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = \cf5 \strokec5 int\cf6 \strokec6 (x) + \cf5 \strokec5 int\cf6 \strokec6 (y)\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (z)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 The result is now correct. The use of\'a0
\fs28 \cb4 int(x)
\fs32 \cb3 , is called \'93casting\'94 where a value is temporarily changed from one type of variable (in this case a string) to another (here, an integer).\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls14\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can further improve our program as follows:\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 x = \cf5 \strokec5 int\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 int\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls14\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (x + y)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls14\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 This illustrates that you can run functions on functions. The most inner function is run first, and then the outer one is run. First, the\'a0
\fs28 \cb4 input
\fs32 \cb3 \'a0function is run. Then, the\'a0
\fs28 \cb4 int
\fs32 \cb3 \'a0function.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls14\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can learn more in Python\'92s Documenation of\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html?highlight=float#int"}}{\fldrslt 
\fs28 \cb4 \ul int}}.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#readability-wins"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Readability Wins}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls15\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 When deciding on your approach to a coding task, remember that one could make a reasonable argument for many approaches to the same problem.\cb1 \
\ls15\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Regardless of what approach you take to a programming task, remember that your code must be readable. You should use comments to give yourself and others clues about what your code is doing. Further, you should create code in a way that is readable.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#float-basics"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Float Basics}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls16\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 A floating point value is a real number that has a decimal point in it, such as\'a0
\fs28 \cb4 0.52
\fs32 \cb3 .\cb1 \
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can change your code to support floats as follows:\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 x = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (x + y)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 This change allows your user to enter\'a0
\fs28 \cb4 1.2
\fs32 \cb3 \'a0and\'a0
\fs28 \cb4 3.4
\fs32 \cb3 \'a0to present a total of\'a0
\fs28 \cb4 4.6
\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls16\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Let\'92s imagine, however, that you want to round the total to the nearest integer. Looking at the Python documentation for\'a0
\fs28 \cb4 round
\fs32 \cb3 \'a0you\'92ll see that the available arguments are\'a0
\fs28 \cb4 round(number[n, ndigits])
\fs32 \cb3 . Those square brackets indicate that something optional can be specified by the programmer. Therefore, you could do\'a0
\fs28 \cb4 round(n)
\fs32 \cb3 \'a0to round a digit to its nearest integer. Alternatively, you could code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Get the user's input\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 x = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Create a rounded result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = \cf5 \strokec5 round\cf6 \strokec6 (x + y)\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (z)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 The output will be rounded to the nearest integer.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls16\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 What if we wanted to format the output of long numbers? For example, rather than seeing\'a0
\fs28 \cb4 1000
\fs32 \cb3 , you may wish to see\'a0
\fs28 \cb4 1,000
\fs32 \cb3 . You could modify your code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Get the user's input\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 x = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Create a rounded result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = \cf5 \strokec5 round\cf6 \strokec6 (x + y)\
\ls16\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the formatted result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "\{\cf6 \strokec6 z\cf7 \strokec7 :\cf6 \strokec6 ,\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls16\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Though quite cryptic, that\'a0
\fs28 \cb4 print(f"\{z:,\}")
\fs32 \cb3 \'a0creates a scenario where the outputted\'a0
\fs28 \cb4 z
\fs32 \cb3 \'a0will include commas where the result could look like\'a0
\fs28 \cb4 1,000
\fs32 \cb3 \'a0or\'a0
\fs28 \cb4 2,500
\fs32 \cb3 .\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#more-on-floats"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 More on Floats}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls17\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 How can we round floating point values? First, modify your code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Get the user's input\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 x = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Calculate the result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = x / y\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (z)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 When inputting\'a0
\fs28 \cb4 2
\fs32 \cb3 \'a0as x and\'a0
\fs28 \cb4 3
\fs32 \cb3 \'a0as y, the result z is\'a0
\fs28 \cb4 0.6666666666
\fs32 \cb3 \'a0seemingly going on to infinite as we might expect.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls17\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Let\'92s imagine that we want to round this down, we could modify our code as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Get the user's input\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 x = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Calculate the result and round\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = \cf5 \strokec5 round\cf6 \strokec6 (x / y, 2)\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (z)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 As we might expect, this will round the result to the nearest two decimal points.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls17\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We could also use\'a0
\fs28 \cb4 fstring
\fs32 \cb3 \'a0to format the output as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Get the user's input\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 x = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 y = \cf5 \strokec5 float\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's y? "\cf6 \strokec6 ))\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Calculate the result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 z = x / y\
\ls17\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the result\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "\{\cf6 \strokec6 z\cf7 \strokec7 :\cf6 \strokec6 .2f\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls17\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 This cryptic\'a0
\fs28 \cb4 fstring
\fs32 \cb3 \'a0code displays the same as our prior rounding strategy.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls17\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can learn more in Python\'92s documentation of\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/library/functions.html?highlight=float#float"}}{\fldrslt 
\fs28 \cb4 \ul float}}.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#def"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Def}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Wouldn\'92t it be nice to create our own functions?\cb1 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Let\'92s bring back our final code of\'a0
\fs28 \cb4 hello.py
\fs32 \cb3 \'a0by typing\'a0
\fs28 \cb4 code hello.py
\fs32 \cb3 \'a0into the terminal window. Your starting code should look as follows:\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Ask the user for their name, remove whitespace from the str and capitalize the first letter of each word\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 ).strip().title()\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Print the output\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (\cf8 \strokec8 f\cf7 \strokec7 "hello, \{\cf6 \strokec6 name\cf7 \strokec7 \}"\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 We can better our code to create our own special function that says \'93hello\'94 for us!\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Erasing all our code in our text editor, let\'92s start from scratch:\cb1 \uc0\u8232 
\fs28 \cf6 \cb4 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hello()\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Attempting to run this code, your compiler will throw an error. After all, there is no defined function for\'a0
\fs28 \cb4 hello
\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can create our own function called\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0as follows:\cb1 \uc0\u8232 
\fs28 \cf8 \cb4 \strokec8 def\cf6 \strokec6  hello():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello"\cf6 \strokec6 )\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hello()\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 print\cf6 \strokec6 (name)\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that everything under\'a0
\fs28 \cb4 def hello()
\fs32 \cb3 \'a0is indented. Python is an indented language. It uses indentation to understand what is part of the above function. Therefore, everything in the\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0function must be indented. When something is not indented, it treats it as if it is not inside the\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0function. Running\'a0
\fs28 \cb4 python hello.py
\fs32 \cb3 \'a0in the terminal window, you\'92ll see that your output is not exactly as you may want.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can further improve our code:
\fs28 \cf6 \cb4 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Create our own function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf6 \strokec6  hello(to):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 , to)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Output using our own function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hello(name)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Here, in the first lines, you are creating your\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0function. This time, however, you are telling the compiler that this function takes a single parameter: a variable called\'a0
\fs28 \cb4 to
\fs32 \cb3 . Therefore, when you call\'a0
\fs28 \cb4 hello(name)
\fs32 \cb3 \'a0the computer passes\'a0
\fs28 \cb4 name
\fs32 \cb3 \'a0into the\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0function as\'a0
\fs28 \cb4 to
\fs32 \cb3 . This is how we pass values into functions. Very useful! Running\'a0
\fs28 \cb4 python hello.py
\fs32 \cb3 \'a0in the terminal window, you\'92ll see that the output is much closer to our ideal presented earlier in this lecture.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can change our code to add a default value to\'a0
\fs28 \cb4 hello
\fs32 \cb3 :\cb1 \uc0\u8232 
\fs28 \cf9 \cb4 \strokec9 # Create our own function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf6 \strokec6  hello(to=\cf7 \strokec7 "world"\cf6 \strokec6 ):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 , to)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Output using our own function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hello(name)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Output without passing the expected arguments\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 hello()\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Test out your code yourself. Notice how the first\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0will behave as you might expect and the second hello, which is not passed a value, will by default output\'a0
\fs28 \cb4 hello, world
\fs32 \cb3 .\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We don\'92t have to have our function at the start of our program. We can move it down, but we need to tell the compiler that we have a\'a0
\fs28 \cb4 main
\fs32 \cb3 \'a0function and we have a separate\'a0
\fs28 \cb4 hello
\fs32 \cb3 \'a0function.\cb1 \uc0\u8232 
\fs28 \cf8 \cb4 \strokec8 def\cf6 \strokec6  main():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf9 \strokec9 # Output using our own function\
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     hello(name)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf9 \strokec9 # Output without passing the expected arguments\
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     hello()\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Create our own function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf6 \strokec6  hello(to=\cf7 \strokec7 "world"\cf6 \strokec6 ):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 , to)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 This alone, however, will create an error of sorts. If we run\'a0
\fs28 \cb4 python hello.py
\fs32 \cb3 \'a0nothing happens! The reason for this is that nothing in this code is actually calling the\'a0
\fs28 \cb4 main
\fs32 \cb3 \'a0function and bringing our program to life.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls18\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 The following very small modification will call the\'a0
\fs28 \cb4 main
\fs32 \cb3 \'a0function and restore our program to working order:\cb1 \uc0\u8232 
\fs28 \cf8 \cb4 \strokec8 def\cf6 \strokec6  main():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf9 \strokec9 # Output using our own function\
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     name = \cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's your name? "\cf6 \strokec6 )\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     hello(name)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf9 \strokec9 # Output without passing the expected arguments\
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     hello()\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf9 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec9 # Create our own function\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf6 \strokec6  hello(to=\cf7 \strokec7 "world"\cf6 \strokec6 ):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls18\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "hello,"\cf6 \strokec6 , to)\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 main()\
\ls18\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#returning-values"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Returning Values}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls19\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can imagine many scenarios where you don\'92t just want a function to perform an action, but also to return a value back to the main function. For example, rather than simply printing the calculation of\'a0
\fs28 \cb4 x + y
\fs32 \cb3 , you may want a function to return the value of this calculation back to another part of your program. This \'93passing back\'94 of a value we call a\'a0
\fs28 \cb4 return
\fs32 \cb3 \'a0value.\cb1 \
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Returning to our\'a0
\fs28 \cb4 calculator.py
\fs32 \cb3 \'a0code by typing\'a0
\fs28 \cb4 code calculator.py
\fs32 \cb3 . Erase all code there. Rework the code as follows:\cb1 \uc0\u8232 
\fs28 \cf8 \cb4 \strokec8 def\cf6 \strokec6  main():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     x = \cf5 \strokec5 int\cf6 \strokec6 (\cf5 \strokec5 input\cf6 \strokec6 (\cf7 \strokec7 "What's x? "\cf6 \strokec6 ))\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 print\cf6 \strokec6 (\cf7 \strokec7 "x squared is"\cf6 \strokec6 , square(x))\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf6 \strokec6  square(n):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls19\ilvl0\cf6 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6     \cf8 \strokec8 return\cf6 \strokec6  n * n\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 main()\
\ls19\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec6 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Effectively,\'a0
\fs28 \cb4 x
\fs32 \cb3 \'a0is passed to\'a0
\fs28 \cb4 square
\fs32 \cb3 . Then, the calculation of\'a0
\fs28 \cb4 x * x
\fs32 \cb3 \'a0is returned back to the main function.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/0/#summing-up"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Summing Up}}
\f0\b\fs35\fsmilli17700 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs32 \cf2 Through the work of this single lecture, you have learned abilities that you will use countless times in your own programs. You have learned about\'85\
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls20\ilvl0\cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Creating your first programs in Python;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Functions;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Bugs;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Variables;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Comments;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Pseudocode;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Strings;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Parameters;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Formatted Strings;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Integers;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Principles of readability;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Floats;\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Creating your own functions; and\cb1 \
\ls20\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Return values.\cb1 \
}