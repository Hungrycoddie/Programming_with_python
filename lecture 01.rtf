{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset204 PTSans-Bold;\f1\fnil\fcharset204 PTSans-Regular;\f2\fnil\fcharset0 LucidaGrande;
}
{\colortbl;\red255\green255\blue255;\red25\green28\blue31;\red255\green255\blue255;\red246\green247\blue249;
\red52\green52\blue52;\red180\green58\blue4;\red19\green142\blue2;\red0\green0\blue255;\red38\green38\blue38;
\red226\green226\blue226;}
{\*\expandedcolortbl;;\cssrgb\c12941\c14510\c16078;\cssrgb\c100000\c100000\c100000;\cssrgb\c97255\c97647\c98039;
\cssrgb\c26667\c26667\c26667;\cssrgb\c76471\c30588\c0;\cssrgb\c0\c61176\c0;\cssrgb\c0\c0\c100000;\cssrgb\c20000\c20000\c20000;
\cssrgb\c90980\c90980\c90980;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{circle\}}{\leveltext\leveltemplateid2\'01\uc0\u9702 ;}{\levelnumbers;}\fi-360\li1440\lin1440 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid101\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid201\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid301\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}
{\list\listtemplateid5\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid401\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid5}
{\list\listtemplateid6\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid501\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid6}
{\list\listtemplateid7\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid601\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid7}
{\list\listtemplateid8\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid701\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid8}
{\list\listtemplateid9\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid801\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid9}
{\list\listtemplateid10\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid901\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid10}
{\list\listtemplateid11\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{none\}}{\leveltext\leveltemplateid1001\'00;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid11}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}{\listoverride\listid5\listoverridecount0\ls5}{\listoverride\listid6\listoverridecount0\ls6}{\listoverride\listid7\listoverridecount0\ls7}{\listoverride\listid8\listoverridecount0\ls8}{\listoverride\listid9\listoverridecount0\ls9}{\listoverride\listid10\listoverridecount0\ls10}{\listoverride\listid11\listoverridecount0\ls11}}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#lecture-1"}}{\fldrslt 
\f0\b\fs46\fsmilli23100 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Lecture 1}}
\f0\b\fs46\fsmilli23100 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\f1\b0\fs32 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#conditionals"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Conditionals}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#if-statements"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 if Statements}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#control-flow-elif-and-else"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Control Flow, elif, and else}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#or"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 or}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#and"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 and}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#modulo"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Modulo}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#creating-our-own-parity-function"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Creating Our Own Parity Function}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\ls1\ilvl0\cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#pythonic"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Pythonic}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls1\ilvl0
\fs28 \cf2 \cb4 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#match"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 match}}
\fs32 \cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\tx940\tx1440\pardeftab720\li1440\fi-1440\partightenfactor0
\ls1\ilvl1\cf2 \cb3 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	
\f2 \uc0\u9702 
\f1 	}{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#summing-up"}}{\fldrslt \expnd0\expndtw0\kerning0
\ul \outl0\strokewidth0 \strokec2 Summing Up}}\cb1 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#conditionals"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Conditionals}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls2\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Conditionals allow you, the programmer, to allow your program to make decisions: As if your program has the choice between taking the left-hand road or the right-hand road based upon certain conditions.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Built within Python are a set of \'93operators\'94 that can are used to ask mathematical questions.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 >
\fs32 \cb3 \'a0and\'a0
\fs28 \cb4 <
\fs32 \cb3 \'a0symbols are probably quite familiar to you.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 >=
\fs32 \cb3 \'a0denotes \'93greater than or equal to.\'94\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 <=
\fs32 \cb3 \'a0denotes \'93less than or equal to.\'94\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 ==
\fs32 \cb3 \'a0denotes \'93equals, though do notice the double equal sign! A single equal sign would assign a value. Double equal signs are used to compare variables.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 !=
\fs32 \cb3 \'a0denotes \'93not equal to.\cb1 \
\ls2\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Conditional statements compare a left-hand term to a right-hand term.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#if-statements"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 if Statements}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls3\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In your terminal window, type\'a0
\fs28 \cb4 code compare.py
\fs32 \cb3 . This will create a brand new file called \'93compare.\'94\cb1 \
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the text editor window, begin with the following:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x < y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls3\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is less than y"\cf5 \strokec5 )\
\ls3\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how your program takes the input of the user for both x and y, casting them as integers and saving them into their respective x and y variables. Then, the\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement compares x and y. If the condition of\'a0
\fs28 \cb4 x < y
\fs32 \cb3 \'a0is met, the\'a0
\fs28 \cb4 print
\fs32 \cb3 \'a0statement is executed.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls3\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 If statements use\'a0
\fs28 \cb4 bool
\fs32 \cb3 \'a0or boolean values (true or false) to decide whether or not to execute. If the statement of\'a0
\fs28 \cb4 x > y
\fs32 \cb3 \'a0is true, the compiler will register it as\'a0
\fs28 \cb4 true
\fs32 \cb3 \'a0and execute the code.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#control-flow-elif-and-else"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Control Flow, elif, and else}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls4\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Further revise your code as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x < y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is less than y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x > y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is greater than y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x == y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is equal to y"\cf5 \strokec5 )\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how you are providing a series of\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statements. First, the first\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement is evaluated. Then, the second\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement runs its evaluation. Finally, the last\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement runs its evaluation. This flow of decisions is called \'93control flow.\'94\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Our code can be represented as follows:\cb1 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 start\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x < y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is less than y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x > y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is greater than y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x == y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is equal to y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 stop\cf2 \cb1 \strokec2 \uc0\u8232 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 This program can be improved by not asking three consecutive questions. After all, not all three questions can have an outcome of true! Revise your program as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x < y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is less than y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  x > y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is greater than y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  x == y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is equal to y"\cf5 \strokec5 )\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how the use of\'a0
\fs28 \cb4 elif
\fs32 \cb3 \'a0allows the program to make less decisions. First, the\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement is evaluated. If this statement is found to be true, all the\'a0
\fs28 \cb4 elif
\fs32 \cb3 \'a0statements not be run at all. However, if the\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement is evaluated and found to be false, the first\'a0
\fs28 \cb4 elif
\fs32 \cb3 \'a0will be evaluated. If this is true, it will not run the final evaluation.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Our code can be represented as follows:\cb1 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \u8232 \cf9 \cb3 \strokec9 start\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x < y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is less than y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x > y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is greater than y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x == y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is equal to y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 stop\cf2 \cb1 \strokec2 \uc0\u8232 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 While your computer may not notice a difference speed-wise between our first program and this revised program, consider how an online server running billions or trillions of these types of calculations each day could definitely be impacted by such a small coding decision.\cb1 \
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 There is one final improvement we can make to our program. Notice how logically\'a0
\fs28 \cb4 elif x == y
\fs32 \cb3 \'a0is not a necessary evaluation to run. After all, if logically x is not less than y AND x is not greater than y, x MUST equal y. Therefore, we don\'92t have to run\'a0
\fs28 \cb4 elif x == y
\fs32 \cb3 . We can create a \'93catch-all,\'94 default outcome using an\'a0
\fs28 \cb4 else
\fs32 \cb3 \'a0statement. We can revise as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x < y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is less than y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  x > y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is greater than y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls4\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is equal to y"\cf5 \strokec5 )\
\ls4\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how the relative complexity of this program has decreased through our revision.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls4\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Our code can be represented as follows:\cb1 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \u8232 \u8232 \cf9 \cb3 \strokec9 start\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x < y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is less than y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x > y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is greater than y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is equal to y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 stop\cf2 \cb1 \strokec2 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#or"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 or}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls5\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 or
\fs32 \cb3 \'a0allows your program to decide between one or more alternatives. For example, we could further edit our program as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x < y or x > y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is not equal to y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is equal to y"\cf5 \strokec5 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that the result of our program is the same, but the complexity is decreased and the efficiency of our code is increased.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 At this point, our code is pretty great. However, could the design be further improved? We could further edit our code as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x != y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is not equal to y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is equal to y"\cf5 \strokec5 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how we removed the\'a0
\fs28 \cb4 or
\fs32 \cb3 \'a0entirely, and simply asked \'93is x not equal to y?\'94 We ask one and only one question. Very efficient!\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 For the purpose of illustration, we could also change our code as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 y = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's y? "\cf5 \strokec5 ))\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x == y:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is equal to y"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls5\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "x is not equal to y"\cf5 \strokec5 )\
\ls5\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that the\'a0
\fs28 \cb4 ==
\fs32 \cb3 \'a0operator evaluates if what is on the left and right are equal to one another. That use of double equal signs is very important. If you use only one equal sign, an error will likely be thrown by the compiler.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls5\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Our code can be illustrated as follows:\cb1 \uc0\u8232 \u8232 \cf9 \cb10 \strokec9 True\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb10 \strokec9 False\cf2 \cb1 \strokec2 \uc0\u8232 \u8232 \u8232 \cf9 \cb3 \strokec9 start\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 x == y\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is equal to y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 "x is not equal to y"\cf2 \cb1 \strokec2 \uc0\u8232 \cf9 \cb3 \strokec9 stop\cf2 \cb1 \strokec2 \uc0\u8232 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#and"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 and}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Similar to\'a0
\fs28 \cb4 or
\fs32 \cb3 ,\'a0
\fs28 \cb4 and
\fs32 \cb3 \'a0can be used within conditional statements.\cb1 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Execute in the terminal window\'a0
\fs28 \cb4 code grade.py
\fs32 \cb3 . Start your new program as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 score = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "Score: "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  score >= 90 and score <= 100:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: A"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  score >=80 and score < 90:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: B"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  score >=70 and score < 80:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: C"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  score >=60 and score < 70:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: D"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: F"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that executing\'a0
\fs28 \cb4 python grade.py
\fs32 \cb3 \'a0you will be able to input a score and get a grade. However, notice how there are potentials for bugs.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Typically, we do not want to ever trust our user to input the correct information. We could improve our code as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5   score = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "Score: "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 if\cf5 \strokec5  90 <= score <= 100:\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: A"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  80 <= score < 90:\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: B"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  70 <= score < 80:\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: C"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  60 <= score < 70:\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: D"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 else\cf5 \strokec5 :\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: F"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how Python allows you to chain together the operators and conditions in a way quite uncommon to other programming languages.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Still, we can further improve our program:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 score = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "Score: "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  score >= 90:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: A"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  score >= 80:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: B"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  score >= 70:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: C"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 elif\cf5 \strokec5  score >= 60:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: D"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls6\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Grade: F"\cf5 \strokec5 )\
\ls6\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how the program is improved by asking fewer questions. This makes our program easier to read and far more maintainable in the future.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls6\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 You can learn more in Python\'92s documentation on\'a0{\field{\*\fldinst{HYPERLINK "https://docs.python.org/3/tutorial/controlflow.html"}}{\fldrslt \ul control flow}}.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#modulo"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Modulo}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls7\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In mathematics, parity refers to whether a number is either even or odd.\cb1 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 The modulo\'a0
\fs28 \cb4 %
\fs32 \cb3 \'a0operator in programming allows one to see if two numbers divide evenly or divide and have a remainder.\cb1 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 For example, 4 % 2 would result in zero, because it evenly divides. However, 3 % 2 does not divide evenly and would result in a number other than zero!\cb1 \
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the terminal window, create a new program by typing\'a0
\fs28 \cb4 code parity.py
\fs32 \cb3 . In the text editor window, type your code as follows:\cb1 \uc0\u8232 
\fs28 \cf5 \cb4 \strokec5 x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 ))\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 if\cf5 \strokec5  x % 2 == 0:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Even"\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 else\cf5 \strokec5 :\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls7\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Odd"\cf5 \strokec5 )\
\ls7\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice how our users can type in any number 1 or greater to see if it is even or odd.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#creating-our-own-parity-function"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Creating Our Own Parity Function}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls8\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 As discussed in Lecture 0, you will find it useful to create a function of your own!\cb1 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can create our own function to check whether a number is even or odd. Adjust your code as follows:\cb1 \uc0\u8232 
\fs28 \cf8 \cb4 \strokec8 def\cf5 \strokec5  main():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 )\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 if\cf5 \strokec5  is_even(x):\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Even"\cf5 \strokec5 )\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 else\cf5 \strokec5 :\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Odd"\cf5 \strokec5 )\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf5 \strokec5  is_even(n):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls8\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 if\cf5 \strokec5  n % 2 == 0:\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 return\cf5 \strokec5  \cf6 \strokec6 True\cf5 \strokec5 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 else\cf5 \strokec5 :\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 return\cf5 \strokec5  \cf6 \strokec6 False\cf5 \strokec5 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 main()\
\ls8\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that one reason our\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement\'a0
\fs28 \cb4 is_even(x)
\fs32 \cb3 \'a0works, even though there is no operator there. This is because our function returns a\'a0
\fs28 \cb4 bool
\fs32 \cb3 \'a0(or boolean), true or false, back to the main function. The\'a0
\fs28 \cb4 if
\fs32 \cb3 \'a0statement simply evaluates whether or not\'a0
\fs28 \cb4 is_even
\fs32 \cb3 \'a0of\'a0
\fs28 \cb4 x
\fs32 \cb3 \'a0is true or false.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#pythonic"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Pythonic}}
\f0\b\fs35\fsmilli17700 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls9\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 In the programming world, there are types of programming that are called \'93Pythonic\'94 in nature. That is, there are ways to program that are sometimes only seen in Python programming. Consider the following revision to our program:
\fs28 \cf8 \cb4 \strokec8 def\cf5 \strokec5  main():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 if\cf5 \strokec5  is_even(x):\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Even"\cf5 \strokec5 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 else\cf5 \strokec5 :\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Odd"\cf5 \strokec5 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf5 \strokec5  is_even(n):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 return\cf5 \strokec5  \cf6 \strokec6 True\cf5 \strokec5  \cf8 \strokec8 if\cf5 \strokec5  n % 2 == 0 \cf8 \strokec8 else\cf5 \strokec5  \cf6 \strokec6 False\cf5 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 main()\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that this return statement in our code is almost like a sentence in English. This is a unique way of coding only seen in Python.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls9\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can further revise our code and make it more and more readable:\cb1 \uc0\u8232 
\fs28 \cf8 \cb4 \strokec8 def\cf5 \strokec5  main():\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     x = \cf6 \strokec6 int\cf5 \strokec5 (\cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's x? "\cf5 \strokec5 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 if\cf5 \strokec5  is_even(x):\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Even"\cf5 \strokec5 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 else\cf5 \strokec5 :\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5         \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Odd"\cf5 \strokec5 )\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf8 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec8 def\cf5 \strokec5  is_even(n):\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls9\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5     \cf8 \strokec8 return\cf5 \strokec5  n % 2 == 0\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 main()\
\ls9\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice that the program will evaluate what is happening within the\'a0
\fs28 \cb4 n % 2 == 0
\fs32 \cb3 \'a0as either true or false and simply return that to the main function.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#match"}}{\fldrslt 
\f0\b\fs40\fsmilli20212 \cf2 \cb4 match}}
\f0\b\fs46\fsmilli23100 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0
\f1\b0\fs32 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Similar to\'a0
\fs28 \cb4 if
\fs32 \cb3 ,\'a0
\fs28 \cb4 elif
\fs32 \cb3 , and\'a0
\fs28 \cb4 else
\fs32 \cb3 \'a0statements,\'a0
\fs28 \cb4 match
\fs32 \cb3 \'a0statements can be used to conditionally run code that matches certain values.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Consider the following program:
\fs28 \cf5 \cb4 \strokec5   name = \cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's your name? "\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 if\cf5 \strokec5  name == \cf7 \strokec7 "Harry"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  name == \cf7 \strokec7 "Hermione"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  name == \cf7 \strokec7 "Ron"\cf5 \strokec5 : \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  name == \cf7 \strokec7 "Draco"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Slytherin"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 else\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Who?"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice the first three conditional statements print the same response.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can improve this code slightly with the use of the\'a0
\fs28 \cb4 or
\fs32 \cb3 \'a0keyword:
\fs28 \cf5 \cb4 \strokec5   name = \cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's your name? "\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 if\cf5 \strokec5  name == \cf7 \strokec7 "Harry"\cf5 \strokec5  or name == \cf7 \strokec7 "Hermione"\cf5 \strokec5  or name == \cf7 \strokec7 "Ron"\cf5 \strokec5 : \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 elif\cf5 \strokec5  name == \cf7 \strokec7 "Draco"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Slytherin"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   \cf8 \strokec8 else\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Who?"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice the number of\'a0
\fs28 \cb4 elif
\fs32 \cb3 \'a0statements has decreased, improving the readability of our code.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Alternatively, we can use\'a0
\fs28 \cb4 match
\fs32 \cb3 \'a0statements to map names to houses. Consider the following code:
\fs28 \cf5 \cb4 \strokec5   name = \cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's your name? "\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   match name: \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case \cf7 \strokec7 "Harry"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case \cf7 \strokec7 "Hermione"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case \cf7 \strokec7 "Ron"\cf5 \strokec5 : \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case \cf7 \strokec7 "Draco"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Slytherin"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case _:\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Who?"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice the use of the\'a0
\fs28 \cb4 _
\fs32 \cb3 \'a0symbol in the last case. This will match with any input, resulting in similar behavior as an\'a0
\fs28 \cb4 else
\fs32 \cb3 \'a0statement.\cb1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls10\ilvl0\cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 A match statement compares the value following the\'a0
\fs28 \cb4 match
\fs32 \cb3 \'a0keyword with each of the values following the\'a0
\fs28 \cb4 case
\fs32 \cb3 \'a0keywords. In the event a match is found, the respective indented code section is executed and the program stops the matching.\cb1 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 We can improve the code:
\fs28 \cf5 \cb4 \strokec5   name = \cf6 \strokec6 input\cf5 \strokec5 (\cf7 \strokec7 "What's your name? "\cf5 \strokec5 )\
\pard\tx220\tx720\pardeftab720\li720\fi-720\partightenfactor0
\ls10\ilvl0\cf5 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5   match name: \
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case \cf7 \strokec7 "Harry"\cf5 \strokec5  | \cf7 \strokec7 "Hermione"\cf5 \strokec5  | \cf7 \strokec7 "Ron"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Gryffindor"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case \cf7 \strokec7 "Draco"\cf5 \strokec5 :\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Slytherin"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5       case _:\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5           \cf8 \strokec8 print\cf5 \strokec5 (\cf7 \strokec7 "Who?"\cf5 \strokec5 )\
\ls10\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 \uc0\u8232 
\fs32 \cb1 \uc0\u8232 \cf2 \strokec2 \uc0\u8232 \cb3 Notice, the use of the single vertical bar\'a0
\fs28 \cb4 |
\fs32 \cb3 . Much like the\'a0
\fs28 \cb4 or
\fs32 \cb3 \'a0keyword, this allows us to check for multiple values in the same\'a0
\fs28 \cb4 case
\fs32 \cb3 \'a0statement.\cb1 \
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \
\pard\pardeftab720\sa240\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://cs50.harvard.edu/python/2022/notes/1/#summing-up"}}{\fldrslt 
\f0\b\fs35\fsmilli17700 \cf2 Summing Up}}
\f0\b\fs35\fsmilli17700 \
\pard\pardeftab720\sa240\partightenfactor0

\f1\b0\fs32 \cf2 You now have the power within Python to use conditional statements to ask questions and have your program take action accordingly. In this lecture, we discussed\'85\
\pard\tx220\tx720\pardeftab720\li720\fi-720\qc\partightenfactor0
\ls11\ilvl0\cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Conditionals;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 if
\fs32 \cb3 \'a0Statements;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Control flow,\'a0
\fs28 \cb4 elif
\fs32 \cb3 , and\'a0
\fs28 \cb4 else
\fs32 \cb3 ;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 or
\fs32 \cb3 ;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 
\fs28 \cb4 and
\fs32 \cb3 ;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Modulo;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Creating your own function;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 Pythonic coding;\cb1 \
\ls11\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 		\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 \uc0\u8232 \cb3 and\'a0
\fs28 \cb4 match
\fs32 \cb3 .\cb1 \
}